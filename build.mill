// Scalafix plugin
import $ivy.`com.goyeau::mill-scalafix_mill0.11:0.5.0`
import com.goyeau.mill.scalafix.ScalafixModule

// VSC version plugin
import $ivy.`de.tototec::de.tobiasroeser.mill.vcs.version::0.4.0`
import de.tobiasroeser.mill.vcs.version.VcsVersion

// Scoverage plugin
import $ivy.`com.lihaoyi::mill-contrib-scoverage:`
import mill.contrib.scoverage.{ScoverageModule, ScoverageReport}

import mill.{Agg, RootModule, T, Task, PathRef, TaskModule}
import mill.scalalib.{ScalaModule, DepSyntax, scalafmt, UnidocModule, TestModule, JavaModule, SonatypeCentralPublishModule}
import mill.scalalib.publish.{Developer, PomSettings, License, VersionControl}
import mill.testrunner.TestResult
import mill.resolve.{Resolve, SelectMode}
import mill.define.{NamedTask, Command, ModuleRef, Module}
import mill.main.Tasks

import scala.sys.process._
import scala.language.postfixOps
import java.io.PrintWriter

trait ScairSettings extends ScalaModule with UnidocModule {

  def scoverageVersion = T{"2.3.0"}
  override def scalaVersion = "3.7.1"
  override def scalacOptions = super.scalacOptions() ++ Seq("-Wunused:imports", "-Xmax-inlines:55")
  override def unidocOptions = super.unidocOptions() ++ Seq("-snippet-compiler:compile")

  override def unidocVersion: T[Option[String]] = Some("0.5.0")

  override def unidocSourceFiles = Task {
      (Seq(compile().classes) ++ T.traverse(transitiveModuleDeps)(_.compile)().map(_.classes))
        .filter(pr => os.exists(pr.path))
        .flatMap(pr => os.walk(pr.path))
        .filter(_.ext == "tasty")
        .map(PathRef(_))
    }
}

trait ScairModule extends ScalafixModule with SonatypeCentralPublishModule with ScoverageModule with ScairSettings {

  override def artifactName = T { s"scair-${super.artifactName()}"}

  override def pomSettings = PomSettings(
    description = artifactName(),
    organization = "io.github.edin-dal",
    url = "https://github.com/edin-dal/scair",
    licenses = Seq(License.`Apache-2.0`),
    versionControl = VersionControl.github(owner = "edin-dal", repo = "scair"),
    // TODO ?
    developers = Seq(
      Developer(
        id = "baymaks",
        name = "Maks Kret",
        url = "https://github.com/baymaks/"
      ),
      Developer(
        id = "papychacal",
        name = "Emilien Bauer",
        url = "https://github.com/PapyChacal/"
      )
    )
  )

  // The normal behaviour, IIUC, is to compile the module at hand with coverage, and not
  // dependencies. This enforces that everything ScaIR is transitively compiled with
  // coverage when compiling a module with coverage.
  trait ScairScoverageData extends ScoverageData {
    override def transitiveModuleRunModuleDeps = {
      super .transitiveModuleRunModuleDeps.map {
        case m: ScairModule => m.scoverage
        case m => m
      }
    }

    override def transitiveModuleCompileModuleDeps = {
      super .transitiveModuleCompileModuleDeps.map {
        case m: ScairModule => m.scoverage
        case m => m
      }
    }
  }
  
  override lazy val scoverage : ScairScoverageData = new ScairScoverageData {}

  override def publishVersion: T[String] = VcsVersion.vcsState().format()

  object test extends ScoverageTests with TestModule.ScalaTest {
    def ivyDeps = Agg(ivy"org.scalatest::scalatest:3.2.19")
  }
}

object `package` extends RootModule with ScairSettings with ScoverageReport {

  override def moduleDeps = Seq(tools)

  def rootModule = ModuleRef(this)

  object core extends ScairModule {

    def ivyDeps = Agg(
      ivy"com.lihaoyi::fastparse:3.1.0",
      ivy"com.github.scopt::scopt:4.1.0"
    )
  }

  object clair extends ScairModule {
    def moduleDeps = Seq(core)
  }

  object dialects extends ScairModule {
    def moduleDeps = Seq(clair)
  }

  object transformations extends ScairModule {
    def moduleDeps = Seq(dialects)
  }

  object tools extends ScairModule  {
    def moduleDeps = Seq(dialects, transformations)
    def mainClass = Some("ScairOpt")
  }

  // Top-level commands and helpers

  def allScalaSources = Tasks(Resolve.Tasks.resolve(this, Seq("__.sources"), SelectMode.Multi).fold(sys.error(_), (tasks : List[NamedTask[_]]) => tasks.filter(_.isInstanceOf[NamedTask[Seq[PathRef]]]).map(_.asInstanceOf[NamedTask[Seq[PathRef]]])))
  def runAllUnitTests = T{T.sequence(Resolve.Tasks.resolve(this, Seq("__.test"), SelectMode.Multi).fold(sys.error(_), (tasks : List[NamedTask[_]]) => tasks.filter(_.isInstanceOf[NamedTask[(String, Seq[TestResult])]]).map(_.asInstanceOf[NamedTask[(String, Seq[TestResult])]])))()}
   
  def allChildren = allChidrenRec(millModuleDirectChildren)
  def allChidrenRec(children: Seq[Module]): Seq[Module] = {
    children ++ children.flatMap(child => allChidrenRec(child.millModuleDirectChildren))
  }

  def scalafixAll(args: String*)= T.command {
    T.sequence(allChildren
      .flatMap{case m : ScalafixModule => Some(m.fix(args:_*))
      case _ => None})()
    }

  // Run all formatting on all sources in the framework
  def formatAll() = T.command {
    scalafixAll()()
    scalafmt.ScalafmtModule.reformatAll(allScalaSources)()
  }

  // Run all formatting *checks* on all sources in the framework
  def checkFormatAll() = T.command {
    scalafixAll("--check")()
    scalafmt.ScalafmtModule.checkFormatAll(allScalaSources)()
  }

  // Define a testAll to run the full framework testing infrastructure
  def testAll() = T.command {
    runAllUnitTests()
    filechecks.run()()
  }


  object filechecks extends TaskModule {

    // Make filechecks runnable directly as ./mill filechecks
    override def defaultCommandName(): String = "run"
    // Define a Mill command to run filechecks
    def run() = Task.Command {
      // It depends on the runnable CLI
      tools.scoverage.launcher()

      // Get the directory root to use as lit's working directory
      val rootPath = rootModule().millModuleBasePath.value
      // Run lit
      val litStatus = os.proc("lit", "tests/filecheck", "-v").call(cwd = rootPath, propagateEnv = true, stdout = os.Inherit, stderr = os.Inherit)
      if (litStatus.exitCode != 0) {
        sys.error(f"Filechecks failed")
      }
    }
  }
}
