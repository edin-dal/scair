// Scalafix plugin
import $ivy.`com.goyeau::mill-scalafix_mill0.11:0.5.0`
import com.goyeau.mill.scalafix.ScalafixModule

// VSC version plugin
import $ivy.`de.tototec::de.tobiasroeser.mill.vcs.version::0.4.0`
import de.tobiasroeser.mill.vcs.version.VcsVersion

import mill.{Agg, RootModule, T, Task, PathRef, TaskModule}
import mill.scalalib.{ScalaModule, DepSyntax, scalafmt, UnidocModule, PublishModule}
import mill.scalalib.publish.{PomSettings, License, VersionControl}
import mill.testrunner.TestResult
import mill.resolve.{Resolve, SelectMode}
import mill.define.{NamedTask, Command, ModuleRef}
import mill.main.Tasks

import scala.sys.process._
import scala.language.postfixOps
import java.io.PrintWriter

trait ScairSettings extends ScalaModule{
  def scalaVersion = "3.3.4"
  def scalacOptions = Seq("-Wunused:imports")
}

trait ScairModule extends ScairSettings with ScalafixModule with UnidocModule with PublishModule {

  override def unidocVersion: T[Option[String]] = Some("0.5.0")
  override def scalaDocOptions = Seq("-Xsource:3")

  override def pomSettings = PomSettings(
    description = artifactName(),
    organization = "io.github.edin-dal",
    url = "https://github.com/edin-dal/scair",
    licenses = Seq(License.`Apache-2.0`),
    versionControl = VersionControl.github(owner = "edin-dal", repo = "scair"),
    // TODO ?
    developers = Seq()
  )

  override def publishVersion: T[String] = VcsVersion.vcsState().format()

  override def unidocSourceFiles = Task {
      (Seq(compile().classes) ++ T.traverse(transitiveModuleDeps)(_.compile)().map(_.classes))
        .filter(pr => os.exists(pr.path))
        .flatMap(pr => os.walk(pr.path))
        .filter(_.ext == "tasty")
        .map(PathRef(_))
    }
  object test extends ScalaTests {

      def ivyDeps = Agg(ivy"org.scalatest::scalatest:3.2.19")
      def testFramework = "org.scalatest.tools.Framework"
    }
}

object `package` extends RootModule with ScairModule {

  override def moduleDeps = Seq(tools)

  def rootModule = ModuleRef(this)

  object core extends ScairModule {

    def ivyDeps = Agg(
      ivy"com.lihaoyi::fastparse:3.1.0",
      ivy"com.github.scopt::scopt:4.1.0"
    )
  }

  object ScaIRDL extends ScairModule {
    def moduleDeps = Seq(core)
  }

  object clair extends ScairModule {
    def moduleDeps = Seq(ScaIRDL)
  }
  object clairV2 extends ScairModule {
    def moduleDeps = Seq(core)
  }

  object dialects extends ScairModule {
    def moduleDeps = Seq(clair, clairV2)
  }

  // Dialect codegen shennanigans, to be gone at some point through ClairV2
  object gen_dialects extends ScairModule {
    def moduleDeps = Seq(dialects)

    override def generatedSources = T.sources {
      super.generatedSources() :+ generateDialects()
    }

    def oneDialect(src:String) = Task.Anon {
        dialects.runner().run(args = (os.Path(f"""${Task.dest}/${src.replace(".", "/")}_gen.scala""")).toString(), mainClass=src)
        print("Generated ")
        println(os.Path(f"""${Task.dest}/${src.replace(".", "/")}_gen.scala"""))
    }
        
    def generateDialects = 
      
      Task.Anon{
          
      T.traverse(Seq(
        "scair.dialects.affinegen.AffineGen",
        "scair.dialects.arithgen.ArithGen",
        "scair.dialects.cmathgen.CMathGen",
      ) )(oneDialect)()
      PathRef(Task.dest)
    }
  }

  object transformations extends ScairModule {
    def moduleDeps = Seq(gen_dialects)
  }

  object tools extends ScairModule  {
    def moduleDeps = Seq(gen_dialects, transformations)
    def mainClass = Some("ScairOpt")
  }

  // Top-level commands and helpers

  def allScalaSources = Tasks(Resolve.Tasks.resolve(this, Seq("__.sources"), SelectMode.Multi).fold(sys.error(_), (tasks : List[NamedTask[_]]) => tasks.filter(_.isInstanceOf[NamedTask[Seq[PathRef]]]).map(_.asInstanceOf[NamedTask[Seq[PathRef]]])))
  def runAllUnitTests = T{T.sequence(Resolve.Tasks.resolve(this, Seq("__.test"), SelectMode.Multi).fold(sys.error(_), (tasks : List[NamedTask[_]]) => tasks.filter(_.isInstanceOf[NamedTask[(String, Seq[TestResult])]]).map(_.asInstanceOf[NamedTask[(String, Seq[TestResult])]])))()}
   
  // Run all formatting on all sources in the framework
  def formatAll() = T.command {
    fix()
    scalafmt.ScalafmtModule.reformatAll(allScalaSources)
  }

  // Run all formatting *checks* on all sources in the framework
  def checkFormatAll() = T.command {
    fix("--check")
    scalafmt.ScalafmtModule.checkFormatAll(allScalaSources)
  }

  // Define a testAll to run the full framework testing infrastructure
  def testAll() = T.command {
    runAllUnitTests()
    filechecks.run()()
  }


  object filechecks extends TaskModule {
    // Populate a file with the full classpath to compile some scala sources
    def classpath = Task.Anon {
      println("Storing full classpath for lit access")
      val full_cp = tools.compileClasspath()
      
      val file = new PrintWriter((rootModule().millModuleBasePath.value / "full-classpath").toString())
      file.print(
        full_cp.map(_.path).mkString(":")
      )
      file.flush()
      file.close()
    }

    // Make filechecks runnable directly as ./mill filechecks
    override def defaultCommandName(): String = "run"
    // Define a Mill command to run filechecks
    def run() = Task.Command {
        // It depens on the runnable CLI
        tools.launcher()
          // It expects this task to populate a helper file
        filechecks.classpath()

        // Get the directory root to use as lit's working directory
        val rootPath = rootModule().millModuleBasePath.value
        // Run lit
        val litStatus = os.proc("lit", "tests/filecheck", "-v").call(cwd = rootPath, propagateEnv = true, stdout = os.Inherit, stderr = os.Inherit)
        if (litStatus.exitCode != 0) {
          sys.error(f"Filechecks failed")

        }
        
      }
    
}

}
